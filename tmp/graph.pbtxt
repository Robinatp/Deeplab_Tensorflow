node {
  name: "parallel_read/filenames/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2
          }
        }
        string_val: "datasets/battery_word_seg/tfrecord/val-00001-of-00002.tfrecord"
        string_val: "datasets/battery_word_seg/tfrecord/val-00000-of-00002.tfrecord"
      }
    }
  }
}
node {
  name: "parallel_read/filenames/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "parallel_read/filenames/Greater/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parallel_read/filenames/Greater"
  op: "Greater"
  input: "parallel_read/filenames/Size"
  input: "parallel_read/filenames/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parallel_read/filenames/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "string_input_producer requires a non-null input tensor"
      }
    }
  }
}
node {
  name: "parallel_read/filenames/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "string_input_producer requires a non-null input tensor"
      }
    }
  }
}
node {
  name: "parallel_read/filenames/Assert/Assert"
  op: "Assert"
  input: "parallel_read/filenames/Greater"
  input: "parallel_read/filenames/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "parallel_read/filenames/Identity"
  op: "Identity"
  input: "parallel_read/filenames/Const"
  input: "^parallel_read/filenames/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "parallel_read/filenames/limit_epochs/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "parallel_read/filenames/limit_epochs/epochs"
  op: "VariableV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "parallel_read/filenames/limit_epochs/epochs/Assign"
  op: "Assign"
  input: "parallel_read/filenames/limit_epochs/epochs"
  input: "parallel_read/filenames/limit_epochs/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@parallel_read/filenames/limit_epochs/epochs"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "parallel_read/filenames/limit_epochs/epochs/read"
  op: "Identity"
  input: "parallel_read/filenames/limit_epochs/epochs"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@parallel_read/filenames/limit_epochs/epochs"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parallel_read/filenames/limit_epochs/CountUpTo"
  op: "CountUpTo"
  input: "parallel_read/filenames/limit_epochs/epochs"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@parallel_read/filenames/limit_epochs/epochs"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "limit"
    value {
      i: 1
    }
  }
}
node {
  name: "parallel_read/filenames/limit_epochs"
  op: "Identity"
  input: "parallel_read/filenames/Identity"
  input: "^parallel_read/filenames/limit_epochs/CountUpTo"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "parallel_read/filenames"
  op: "FIFOQueueV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "capacity"
    value {
      i: 32
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "parallel_read/filenames/filenames_EnqueueMany"
  op: "QueueEnqueueManyV2"
  input: "parallel_read/filenames"
  input: "parallel_read/filenames/limit_epochs"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "parallel_read/filenames/filenames_Close"
  op: "QueueCloseV2"
  input: "parallel_read/filenames"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "parallel_read/filenames/filenames_Close_1"
  op: "QueueCloseV2"
  input: "parallel_read/filenames"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "parallel_read/filenames/filenames_Size"
  op: "QueueSizeV2"
  input: "parallel_read/filenames"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parallel_read/filenames/ToFloat"
  op: "Cast"
  input: "parallel_read/filenames/filenames_Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parallel_read/filenames/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03125
      }
    }
  }
}
node {
  name: "parallel_read/filenames/mul"
  op: "Mul"
  input: "parallel_read/filenames/ToFloat"
  input: "parallel_read/filenames/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parallel_read/filenames/fraction_of_32_full/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "parallel_read/filenames/fraction_of_32_full"
      }
    }
  }
}
node {
  name: "parallel_read/filenames/fraction_of_32_full"
  op: "ScalarSummary"
  input: "parallel_read/filenames/fraction_of_32_full/tags"
  input: "parallel_read/filenames/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parallel_read/common_queue"
  op: "FIFOQueueV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "capacity"
    value {
      i: 256
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shapes"
    value {
      list {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "parallel_read/common_queue_Size"
  op: "QueueSizeV2"
  input: "parallel_read/common_queue"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parallel_read/ToFloat"
  op: "Cast"
  input: "parallel_read/common_queue_Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parallel_read/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00390625
      }
    }
  }
}
node {
  name: "parallel_read/mul"
  op: "Mul"
  input: "parallel_read/ToFloat"
  input: "parallel_read/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parallel_read/fraction_of_256_full/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "parallel_read/fraction_of_256_full"
      }
    }
  }
}
node {
  name: "parallel_read/fraction_of_256_full"
  op: "ScalarSummary"
  input: "parallel_read/fraction_of_256_full/tags"
  input: "parallel_read/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parallel_read/TFRecordReaderV2"
  op: "TFRecordReaderV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "compression_type"
    value {
      s: ""
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "parallel_read/ReaderReadV2"
  op: "ReaderReadV2"
  input: "parallel_read/TFRecordReaderV2"
  input: "parallel_read/filenames"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "parallel_read/common_queue_enqueue"
  op: "QueueEnqueueV2"
  input: "parallel_read/common_queue"
  input: "parallel_read/ReaderReadV2"
  input: "parallel_read/ReaderReadV2:1"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "parallel_read/common_queue_Close"
  op: "QueueCloseV2"
  input: "parallel_read/common_queue"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "parallel_read/common_queue_Close_1"
  op: "QueueCloseV2"
  input: "parallel_read/common_queue"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "parallel_read/common_queue_Dequeue"
  op: "QueueDequeueV2"
  input: "parallel_read/common_queue"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "ParseSingleExample/key_image/encoded"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape"
  op: "Reshape"
  input: "ParseSingleExample/key_image/encoded"
  input: "ParseSingleExample/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/key_image/filename"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape_1"
  op: "Reshape"
  input: "ParseSingleExample/key_image/filename"
  input: "ParseSingleExample/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/key_image/format"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "jpeg"
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape_2/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape_2"
  op: "Reshape"
  input: "ParseSingleExample/key_image/format"
  input: "ParseSingleExample/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/key_image/height"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape_3/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape_3"
  op: "Reshape"
  input: "ParseSingleExample/key_image/height"
  input: "ParseSingleExample/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/key_image/segmentation/class/encoded"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape_4/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape_4"
  op: "Reshape"
  input: "ParseSingleExample/key_image/segmentation/class/encoded"
  input: "ParseSingleExample/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/key_image/segmentation/class/format"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "png"
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape_5/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape_5"
  op: "Reshape"
  input: "ParseSingleExample/key_image/segmentation/class/format"
  input: "ParseSingleExample/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/key_image/width"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape_6/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/Reshape_6"
  op: "Reshape"
  input: "ParseSingleExample/key_image/width"
  input: "ParseSingleExample/Reshape_6/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ParseSingleExample/ParseSingleExample"
  op: "ParseSingleExample"
  input: "parallel_read/common_queue_Dequeue:1"
  input: "ParseSingleExample/Reshape"
  input: "ParseSingleExample/Reshape_1"
  input: "ParseSingleExample/Reshape_2"
  input: "ParseSingleExample/Reshape_3"
  input: "ParseSingleExample/Reshape_4"
  input: "ParseSingleExample/Reshape_5"
  input: "ParseSingleExample/Reshape_6"
  attr {
    key: "Tdense"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "dense_keys"
    value {
      list {
        s: "image/encoded"
        s: "image/filename"
        s: "image/format"
        s: "image/height"
        s: "image/segmentation/class/encoded"
        s: "image/segmentation/class/format"
        s: "image/width"
      }
    }
  }
  attr {
    key: "dense_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "num_sparse"
    value {
      i: 0
    }
  }
  attr {
    key: "sparse_keys"
    value {
      list {
      }
    }
  }
  attr {
    key: "sparse_types"
    value {
      list {
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "ParseSingleExample/ParseSingleExample"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "ParseSingleExample/ParseSingleExample:1"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Reshape_2/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_2"
  op: "Reshape"
  input: "ParseSingleExample/ParseSingleExample:2"
  input: "Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Reshape_3/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_3"
  op: "Reshape"
  input: "ParseSingleExample/ParseSingleExample:3"
  input: "Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Reshape_4/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_4"
  op: "Reshape"
  input: "ParseSingleExample/ParseSingleExample:4"
  input: "Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Reshape_5/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_5"
  op: "Reshape"
  input: "ParseSingleExample/ParseSingleExample:5"
  input: "Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Reshape_6/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_6"
  op: "Reshape"
  input: "ParseSingleExample/ParseSingleExample:6"
  input: "Reshape_6/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Equal/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "raw"
      }
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "Reshape_2"
  input: "Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Equal_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "RAW"
      }
    }
  }
}
node {
  name: "Equal_1"
  op: "Equal"
  input: "Reshape_2"
  input: "Equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "LogicalOr"
  op: "LogicalOr"
  input: "Equal"
  input: "Equal_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/preds_c"
  op: "Pack"
  input: "LogicalOr"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "case/Cast"
  op: "Cast"
  input: "case/preds_c"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "case/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "case/num_true_conds"
  op: "Sum"
  input: "case/Cast"
  input: "case/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "case/n_true_conds"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "case/LessEqual"
  op: "LessEqual"
  input: "case/num_true_conds"
  input: "case/n_true_conds"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Input error: exclusive=True: more than 1 conditions (LogicalOr:0) evaluated as True:"
      }
    }
  }
}
node {
  name: "case/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "case/LessEqual"
  input: "case/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "case/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "case/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "case/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^case/Assert/AssertGuard/switch_t"
}
node {
  name: "case/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "case/Assert/AssertGuard/switch_t"
  input: "^case/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@case/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^case/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Input error: exclusive=True: more than 1 conditions (LogicalOr:0) evaluated as True:"
      }
    }
  }
}
node {
  name: "case/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "case/Assert/AssertGuard/Assert/Switch"
  input: "case/Assert/AssertGuard/Assert/data_0"
  input: "case/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 1
    }
  }
}
node {
  name: "case/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "case/LessEqual"
  input: "case/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@case/LessEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "case/preds_c"
  input: "case/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@case/preds_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "case/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "case/Assert/AssertGuard/switch_f"
  input: "^case/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@case/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "case/Assert/AssertGuard/control_dependency_1"
  input: "case/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/Switch"
  op: "Switch"
  input: "LogicalOr"
  input: "LogicalOr"
  input: "^case/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/switch_t"
  op: "Identity"
  input: "case/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/switch_f"
  op: "Identity"
  input: "case/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/pred_id"
  op: "Identity"
  input: "LogicalOr"
  input: "^case/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/DecodeRaw"
  op: "DecodeRaw"
  input: "case/cond/DecodeRaw/Switch:1"
  input: "^case/Assert/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "little_endian"
    value {
      b: true
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "case/cond/DecodeRaw/Switch"
  op: "Switch"
  input: "Reshape"
  input: "case/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/is_jpeg/Substr/pos"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "case/cond/is_jpeg/Substr/len"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "case/cond/is_jpeg/Substr"
  op: "Substr"
  input: "case/cond/is_jpeg/Substr/Switch"
  input: "case/cond/is_jpeg/Substr/pos"
  input: "case/cond/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/is_jpeg/Substr/Switch"
  op: "Switch"
  input: "Reshape"
  input: "case/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/is_jpeg/Equal/y"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "case/cond/is_jpeg/Equal"
  op: "Equal"
  input: "case/cond/is_jpeg/Substr"
  input: "case/cond/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/Switch"
  op: "Switch"
  input: "case/cond/is_jpeg/Equal"
  input: "case/cond/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/switch_t"
  op: "Identity"
  input: "case/cond/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/switch_f"
  op: "Identity"
  input: "case/cond/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/pred_id"
  op: "Identity"
  input: "case/cond/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "case/cond/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^case/Assert/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "case/cond/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "case/cond/is_jpeg/Substr/Switch"
  input: "case/cond/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/Substr/pos"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/Substr/len"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/Substr"
  op: "Substr"
  input: "case/cond/cond_jpeg/decode_image/Substr/Switch"
  input: "case/cond/cond_jpeg/decode_image/Substr/pos"
  input: "case/cond/cond_jpeg/decode_image/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/Substr/Switch"
  op: "Switch"
  input: "case/cond/is_jpeg/Substr/Switch"
  input: "case/cond/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/is_jpeg/Substr/pos"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/is_jpeg/Substr/len"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/is_jpeg/Substr"
  op: "Substr"
  input: "case/cond/cond_jpeg/decode_image/Substr/Switch"
  input: "case/cond/cond_jpeg/decode_image/is_jpeg/Substr/pos"
  input: "case/cond/cond_jpeg/decode_image/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/is_jpeg/Equal/y"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/is_jpeg/Equal"
  op: "Equal"
  input: "case/cond/cond_jpeg/decode_image/is_jpeg/Substr"
  input: "case/cond/cond_jpeg/decode_image/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/Switch"
  op: "Switch"
  input: "case/cond/cond_jpeg/decode_image/is_jpeg/Equal"
  input: "case/cond/cond_jpeg/decode_image/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/switch_t"
  op: "Identity"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/switch_f"
  op: "Identity"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/pred_id"
  op: "Identity"
  input: "case/cond/cond_jpeg/decode_image/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/check_jpeg_channels/x"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/check_jpeg_channels"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "case/cond/cond_jpeg/decode_image/Substr/Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/is_png/y"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/is_png"
  op: "Equal"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/is_png/Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "case/cond/cond_jpeg/decode_image/Substr"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@case/cond/cond_jpeg/decode_image/Substr"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/is_png"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  input: "^case/Assert/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "channels"
    value {
      i: 3
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "case/cond/cond_jpeg/decode_image/Substr/Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng/Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif/Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/is_png/Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@case/cond/cond_jpeg/decode_image/Substr"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng/Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^case/Assert/AssertGuard/Merge"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Merge"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/decode_image/cond_jpeg/Merge"
  op: "Merge"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/Merge"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/cond_jpeg/Merge"
  op: "Merge"
  input: "case/cond/cond_jpeg/decode_image/cond_jpeg/Merge"
  input: "case/cond/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case/cond/Merge"
  op: "Merge"
  input: "case/cond/cond_jpeg/Merge"
  input: "case/cond/DecodeRaw"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Equal_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "raw"
      }
    }
  }
}
node {
  name: "Equal_2"
  op: "Equal"
  input: "Reshape_5"
  input: "Equal_2/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Equal_3/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "RAW"
      }
    }
  }
}
node {
  name: "Equal_3"
  op: "Equal"
  input: "Reshape_5"
  input: "Equal_3/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "LogicalOr_1"
  op: "LogicalOr"
  input: "Equal_2"
  input: "Equal_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/preds_c"
  op: "Pack"
  input: "LogicalOr_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "case_1/Cast"
  op: "Cast"
  input: "case_1/preds_c"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "case_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "case_1/num_true_conds"
  op: "Sum"
  input: "case_1/Cast"
  input: "case_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "case_1/n_true_conds"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "case_1/LessEqual"
  op: "LessEqual"
  input: "case_1/num_true_conds"
  input: "case_1/n_true_conds"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Input error: exclusive=True: more than 1 conditions (LogicalOr_1:0) evaluated as True:"
      }
    }
  }
}
node {
  name: "case_1/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "case_1/LessEqual"
  input: "case_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "case_1/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "case_1/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "case_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^case_1/Assert/AssertGuard/switch_t"
}
node {
  name: "case_1/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "case_1/Assert/AssertGuard/switch_t"
  input: "^case_1/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@case_1/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Input error: exclusive=True: more than 1 conditions (LogicalOr_1:0) evaluated as True:"
      }
    }
  }
}
node {
  name: "case_1/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "case_1/Assert/AssertGuard/Assert/Switch"
  input: "case_1/Assert/AssertGuard/Assert/data_0"
  input: "case_1/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 1
    }
  }
}
node {
  name: "case_1/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "case_1/LessEqual"
  input: "case_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@case_1/LessEqual"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "case_1/preds_c"
  input: "case_1/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@case_1/preds_c"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "case_1/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "case_1/Assert/AssertGuard/switch_f"
  input: "^case_1/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@case_1/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "case_1/Assert/AssertGuard/control_dependency_1"
  input: "case_1/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/Switch"
  op: "Switch"
  input: "LogicalOr_1"
  input: "LogicalOr_1"
  input: "^case_1/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/switch_t"
  op: "Identity"
  input: "case_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/switch_f"
  op: "Identity"
  input: "case_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/pred_id"
  op: "Identity"
  input: "LogicalOr_1"
  input: "^case_1/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/DecodeRaw"
  op: "DecodeRaw"
  input: "case_1/cond/DecodeRaw/Switch:1"
  input: "^case_1/Assert/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "little_endian"
    value {
      b: true
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "case_1/cond/DecodeRaw/Switch"
  op: "Switch"
  input: "Reshape_4"
  input: "case_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/is_jpeg/Substr/pos"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "case_1/cond/is_jpeg/Substr/len"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "case_1/cond/is_jpeg/Substr"
  op: "Substr"
  input: "case_1/cond/is_jpeg/Substr/Switch"
  input: "case_1/cond/is_jpeg/Substr/pos"
  input: "case_1/cond/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/is_jpeg/Substr/Switch"
  op: "Switch"
  input: "Reshape_4"
  input: "case_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/is_jpeg/Equal/y"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "case_1/cond/is_jpeg/Equal"
  op: "Equal"
  input: "case_1/cond/is_jpeg/Substr"
  input: "case_1/cond/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/Switch"
  op: "Switch"
  input: "case_1/cond/is_jpeg/Equal"
  input: "case_1/cond/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/switch_t"
  op: "Identity"
  input: "case_1/cond/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/switch_f"
  op: "Identity"
  input: "case_1/cond/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/pred_id"
  op: "Identity"
  input: "case_1/cond/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "case_1/cond/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^case_1/Assert/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 1
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "case_1/cond/is_jpeg/Substr/Switch"
  input: "case_1/cond/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/Substr/pos"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/Substr/len"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/Substr"
  op: "Substr"
  input: "case_1/cond/cond_jpeg/decode_image/Substr/Switch"
  input: "case_1/cond/cond_jpeg/decode_image/Substr/pos"
  input: "case_1/cond/cond_jpeg/decode_image/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/Substr/Switch"
  op: "Switch"
  input: "case_1/cond/is_jpeg/Substr/Switch"
  input: "case_1/cond/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/is_jpeg/Substr/pos"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/is_jpeg/Substr/len"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/is_jpeg/Substr"
  op: "Substr"
  input: "case_1/cond/cond_jpeg/decode_image/Substr/Switch"
  input: "case_1/cond/cond_jpeg/decode_image/is_jpeg/Substr/pos"
  input: "case_1/cond/cond_jpeg/decode_image/is_jpeg/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/is_jpeg/Equal/y"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\377\330\377"
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/is_jpeg/Equal"
  op: "Equal"
  input: "case_1/cond/cond_jpeg/decode_image/is_jpeg/Substr"
  input: "case_1/cond/cond_jpeg/decode_image/is_jpeg/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/Switch"
  op: "Switch"
  input: "case_1/cond/cond_jpeg/decode_image/is_jpeg/Equal"
  input: "case_1/cond/cond_jpeg/decode_image/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/switch_t"
  op: "Identity"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/switch_f"
  op: "Identity"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/pred_id"
  op: "Identity"
  input: "case_1/cond/cond_jpeg/decode_image/is_jpeg/Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/check_jpeg_channels/x"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/check_jpeg_channels/y"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/check_jpeg_channels"
  op: "NotEqual"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/check_jpeg_channels/x"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/check_jpeg_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/Assert/Const"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/Assert/Assert/data_0"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/Assert/Assert"
  op: "Assert"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/check_jpeg_channels"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/DecodeJpeg"
  op: "DecodeJpeg"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/DecodeJpeg/Switch:1"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "acceptable_fraction"
    value {
      f: 1.0
    }
  }
  attr {
    key: "channels"
    value {
      i: 1
    }
  }
  attr {
    key: "dct_method"
    value {
      s: ""
    }
  }
  attr {
    key: "fancy_upscaling"
    value {
      b: true
    }
  }
  attr {
    key: "ratio"
    value {
      i: 1
    }
  }
  attr {
    key: "try_recover_truncated"
    value {
      b: false
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/DecodeJpeg/Switch"
  op: "Switch"
  input: "case_1/cond/cond_jpeg/decode_image/Substr/Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/is_png/y"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "\211PN"
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/is_png"
  op: "Equal"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/is_png/Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/is_png/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/is_png/Switch"
  op: "Switch"
  input: "case_1/cond/cond_jpeg/decode_image/Substr"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@case_1/cond/cond_jpeg/decode_image/Substr"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/Switch"
  op: "Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/is_png"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/switch_t"
  op: "Identity"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/switch_f"
  op: "Identity"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/pred_id"
  op: "Identity"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/is_png"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng"
  op: "DecodePng"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng/Switch_1:1"
  input: "^case_1/Assert/AssertGuard/Merge"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "channels"
    value {
      i: 1
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng/Switch"
  op: "Switch"
  input: "case_1/cond/cond_jpeg/decode_image/Substr/Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng/Switch_1"
  op: "Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng/Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif/y"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "GIF"
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif"
  op: "Equal"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif/Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif/Switch"
  op: "Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/is_png/Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@case_1/cond/cond_jpeg/decode_image/Substr"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Switch"
  op: "Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  op: "Identity"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  op: "Identity"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/pred_id"
  op: "Identity"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/is_gif"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  op: "NotEqual"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels/x"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  op: "NotEqual"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/x"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  op: "LogicalAnd"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_gif_channels_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert/Const"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  op: "Assert"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/LogicalAnd"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif"
  op: "DecodeGif"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1:1"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  op: "Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng/Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch_1"
  op: "Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/pos"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/len"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr"
  op: "Substr"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/pos"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/len"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  op: "Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif/Switch"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/pred_id"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Reshape_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "BM"
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/is_bmp"
  op: "Equal"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/is_bmp/y"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Const"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  op: "Assert"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/is_bmp"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_channels/x"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_channels/y"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_channels"
  op: "NotEqual"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_channels/x"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_channels/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Const"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  op: "Const"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  op: "Assert"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/check_channels"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  op: "DecodeBmp"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Substr/Switch"
  input: "^case_1/Assert/AssertGuard/Merge"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_1/Assert"
  input: "^case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Assert_2/Assert"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "channels"
    value {
      i: 0
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Merge"
  op: "Merge"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeBmp"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/DecodeGif"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/Merge"
  op: "Merge"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/cond_gif/Merge"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/DecodePng"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/Merge"
  op: "Merge"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/cond_png/Merge"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/cond_jpeg/Merge"
  op: "Merge"
  input: "case_1/cond/cond_jpeg/decode_image/cond_jpeg/Merge"
  input: "case_1/cond/cond_jpeg/DecodeJpeg"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "case_1/cond/Merge"
  op: "Merge"
  input: "case_1/cond/cond_jpeg/Merge"
  input: "case_1/cond/DecodeRaw"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "Squeeze"
  op: "Squeeze"
  input: "case_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "global_step"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "parallel_read/filenames/limit_epochs/epochs"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@parallel_read/filenames/limit_epochs/epochs"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 2
          }
        }
        string_val: "global_step"
        string_val: "parallel_read/filenames/limit_epochs/epochs"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^parallel_read/filenames/limit_epochs/epochs/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init_1"
  input: "^init_all_tables"
}
versions {
  producer: 26
}
